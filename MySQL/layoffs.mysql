select * from layoffs;
select count(*) from layoffs_2_2;
 
-- DATA CLEANING
-- 1. REMOVE DUPLICATE
-- 2. STANDARDIZE DATA
-- 3. NULL OR BLANKS VALUES
-- 4. REMOVE ANY COLUMNS

SELECT COUNT(*) FROM LAYOFFS; -- COUNTING MY DATA

SELECT * FROM LAYOFFS;  -- CALLING OUT THE ORIGINAL TABLE

-- REMOVING DUPLICATES
CREATE TABLE LAYOFFS_2 LIKE LAYOFFS; -- CREATING ANOTHER TABLE

SELECT * FROM LAYOFFS_2;

INSERT LAYOFFS_2 SELECT * FROM LAYOFFS; -- TO INSERT LAYOFFS DATA TO LAYOFFS_2 TABLE

WITH LAYOFFS_2_CTE AS ( -- CREATING COMMON TABLE EXPRESSION 
SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, DATE, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ID
FROM LAYOFFS_2)
SELECT * FROM LAYOFFS_2_CTE
WHERE ID >1;

-- CALLING OUT COMPANY TO SEE IF THERE'S DUPLICATE
SELECT * FROM LAYOFFS_2 WHERE COMPANY = 'CASPER';

-- CREATING A NEW TABLE TO DELETE DUPLICATE
CREATE TABLE `layoffs_2_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `ID` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT * FROM LAYOFFS_2_2;

-- INSERT INTO LAYOFFS_2_2
INSERT INTO LAYOFFS_2_2
SELECT *, ROW_NUMBER() OVER (PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, DATE, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ID
FROM LAYOFFS_2;

-- CHECKING FOR DUPLICATE
SELECT * FROM LAYOFFS_2_2
WHERE ID > 1;

-- DELETING DUPLICATE CALLED OUT
DELETE FROM LAYOFFS_2_2
WHERE ID > 1; --  DUPLICATE DELETED

SELECT * FROM LAYOFFS_2_2 WHERE ID > 1;

SELECT COUNT(*) FROM LAYOFFS_2_2;

-- 2. STANDARDIZING DATA: FINDING ISSUES AND FIXING IT

SELECT * FROM LAYOFFS_2_2;

SELECT DISTINCT (LOCATION) FROM LAYOFFS_2_2 ORDER BY LOCATION DESC;

SELECT DISTINCT (TRIM(COMPANY)) FROM LAYOFFS_2_2; -- TRIM THE COLUMN (SELECTING UNIQUE COLUMN FIRST)

SELECT COMPANY, TRIM(COMPANY) FROM LAYOFFS_2_2; -- THE VALUE IN COMPANY IS NOT STANDARD

-- SET COMPANY TO TRIM
UPDATE LAYOFFS_2_2
SET COMPANY = TRIM(COMPANY); -- UPDATING TABLE

-- LOOKING AT THE INDUSTRY
SELECT DISTINCT INDUSTRY FROM LAYOFFS_2_2;

-- ORDER BY THE INDUSTRY
 SELECT DISTINCT INDUSTRY FROM LAYOFFS_2_2 ORDER BY 1;
 
 -- UPDATE 'CRYPTO CURRENCY' TO 'CRYPTO'
 SELECT * FROM LAYOFFS_2_2 WHERE INDUSTRY LIKE 'CRYPTO%';
 
 UPDATE LAYOFFS_2_2
 SET INDUSTRY = 'CRYPTO'
 WHERE INDUSTRY LIKE 'CRYPTO%';
 
 -- CALLING OUT DISTINCT INDUSTRY
 SELECT DISTINCT INDUSTRY FROM LAYOFFS_2_2;
 
 -- CALLING OUT LAYOFFS_2_2 AGAIN
 SELECT * FROM LAYOFFS_2_2;
 
 -- CHECKING OUT THE COUNTRY
 SELECT DISTINCT COUNTRY FROM LAYOFFS_2_2 ORDER BY 1;
 
 -- UPDATE ANYWHERE WE SEE UNITED STATES. TO UNITED STATES
 UPDATE LAYOFFS_2_2
 SET COUNTRY = TRIM(TRAILING '.' FROM COUNTRY) -- TRAILING MEANS DATA COMING AT THE END OR LATE#
 WHERE COUNTRY LIKE 'UNITED STATES%';
 
 -- UPDATE DATE FROM TEXT TO DATE
 SELECT DATE FROM LAYOFFS_2_2;
 
 SELECT `DATE`,
 STR_TO_DATE(`DATE`, '%m/%d/%Y')
 FROM LAYOFFS_2_2;
 

UPDATE LAYOFFS_2_2
SET `DATE` = STR_TO_DATE(`DATE`, '%m/%d/%Y');

ALTER TABLE LAYOFFS_2_2 
MODIFY COLUMN `DATE` DATE;

SELECT * FROM LAYOFFS_2_2;

-- HANDLING MISSING VALUES
SELECT COMPANY FROM LAYOFFS_2_2 
WHERE COMPANY IS NULL OR COMPANY = ''; -- THERE'S NO NULL OR BLANK VALUE

SELECT COMPANY FROM LAYOFFS_2_2 
ORDER BY COMPANY;  -- ANOTHER CODE

SELECT INDUSTRY FROM LAYOFFS_2_2 
WHERE INDUSTRY IS NULL OR INDUSTRY = ''; -- HAS BLANK AND NULL VALUES

SELECT INDUSTRY FROM LAYOFFS_2_2 
ORDER BY INDUSTRY;
SELECT * FROM LAYOFFS_2_2;

SELECT FUNDS_RAISED_MILLIONS FROM LAYOFFS_2_2 
ORDER BY FUNDS_RAISED_MILLIONS ; -- HAS BLANK AND NULL VALUES

-- JOINING AND CHECKING FOR BLANK INDUSTRY
SELECT T1.INDUSTRY, T2.INDUSTRY
FROM LAYOFFS_2_2 T1 JOIN LAYOFFS_2_2 T2 ON T1.COMPANY = T2.COMPANY
WHERE (T1.INDUSTRY IS NULL OR T1.INDUSTRY = '')
AND T2.INDUSTRY IS NOT NULL;

-- UPDATING THE BLANK VALUES 
UPDATE LAYOFFS_2_2
SET INDUSTRY = null
WHERE INDUSTRY = '';  -- UPDATING THE BLANK VALUES TO NULL FIRST

UPDATE LAYOFFS_2_2 T1
JOIN LAYOFFS_2_2 T2
ON T1.COMPANY = T2.COMPANY 
SET T1.INDUSTRY = T2.INDUSTRY
WHERE T1.INDUSTRY IS NULL AND PERCENTAGE_LAID_OFF IS NULL;

-- REMOVING COLUMNS AND ROWS 
SELECT * FROM LAYOFFS_2_2
WHERE TOTAL_LAID_OFF IS NULL AND PERCENTAGE_LAID_OFF IS NULL;

-- DELETING THE NULL VALUES
DELETE FROM LAYOFFS_2_2
WHERE TOTAL_LAID_OFF IS NULL AND PERCENTAGE_LAID_OFF IS NULL;

SELECT * FROM LAYOFFS_2_2; 

-- DROP CREATED ID
ALTER TABLE LAYOFFS_2_2
DROP COLUMN ID;

-- THE END
 
 -- EXPLORATORY DATA ANALYSIS (EDA)
 -- 1. Which companies had the highest total number of layoffs?
SELECT company, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY company
ORDER BY total_layoffs DESC
LIMIT 10;

-- 2. What is the distribution of layoffs over time (monthly or yearly)?
SELECT STR_TO_DATE('%Y-%m', DATE) AS month, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY month
ORDER BY month;

-- 3. Which industries were affected the most by layoffs?
SELECT industry, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY industry
ORDER BY total_layoffs DESC 
LIMIT 10;

-- 4. Which countries had the most layoffs?
SELECT country, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY country
ORDER BY total_layoffs DESC
LIMIT 10;

-- 5. What is the trend of layoffs over time in the United States specifically?
SELECT str_to_date('%Y-%m', DATE) AS month, SUM(total_laid_off) AS us_layoffs
FROM layoffs
WHERE country = 'United States'
GROUP BY month
ORDER BY month;

-- 6. Which company conducted the single largest layoff event?
SELECT company, DATE, MAX(total_laid_off) AS max_layoffs
FROM layoffs
WHERE total_laid_off IS NOT NULL
group BY layoffs 
LIMIT 1;

-- 7. Are layoffs concentrated in certain months of the year (seasonal pattern)?
SELECT str_to_date('%m', DATE) AS month, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY month
ORDER BY month;

-- 8. How many total layoffs occurred each year?
SELECT str_to_date('%Y', DATE) AS year, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY year
ORDER BY year;

-- 9. What percentage of a companyâ€™s workforce was typically laid off?
SELECT company, AVG(percentage_laid_off) AS avg_layoff_percent
FROM layoffs
WHERE percentage_laid_off IS NOT NULL
GROUP BY company
ORDER BY avg_layoff_percent DESC
LIMIT 10;

-- 10. Are startup companies more likely to lay off employees compared to larger companies?
SELECT stage, AVG(total_laid_off) AS avg_layoffs
FROM layoffs
WHERE total_laid_off IS NOT NULL
GROUP BY stage
ORDER BY avg_layoffs DESC;

-- 11. How does funding stage (e.g., Seed, Series A) relate to layoffs?
SELECT stage, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY stage
ORDER BY total_layoffs DESC;

-- 12.Which cities were most affected by layoffs?
SELECT location AS city, SUM(total_laid_off) AS total_layoffs
FROM layoffs
GROUP BY location
ORDER BY total_layoffs DESC
LIMIT 10;

-- 13. Has the average layoff size increased or decreased over time?
SELECT str_to_date('%Y-%m', DATE) AS month, AVG(total_laid_off) AS avg_layoffs_per_event
FROM layoffs
WHERE total_laid_off IS NOT NULL
GROUP BY month
ORDER BY month;







